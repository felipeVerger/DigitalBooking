stages:
  - build
  - test
  - docker-build
  - deploy

variables:
  IMAGE_NAME: front
  TAG_LATEST: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:latest
  TAG_COMMIT: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA
  DOCKER_TLS_CERTDIR: ""


build:
  stage: build
  image: node
  script: 
    - echo "Start building App"
    - cd front/reserva-hoteles/
    - npm install
    - CI=false npm run build
    - echo "Build successfully!"
  artifacts:
    expire_in: 1 hour
    paths:
      - front/reserva-hoteles/build
      - front/reserva-hoteles/node_modules/

test:
  stage: test
  needs: [build]
  image: node
  script:
    - echo "Testing App"
    #- cd front/reserva-hoteles/
    #- npm install
    #- CI=true npm test --passWithNoTests
    - echo "Test successfully!"

docker-build:
  stage: docker-build
  needs: [test]
  image: docker:latest
  services: 
    - name: docker:18.09.7-dind
      alias: docker

  script:    
    - aws ecr get-login-password --region $AWS_REGION |
      docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
    - docker pull $TAG_LATEST || true
    - docker build --cache-from $TAG_LATEST -t $TAG_COMMIT -t $TAG_LATEST .
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST

deploy:
  stage: deploy
  needs: [docker-build]
  image: kroniak/ssh-client
  #before_script:
    #- echo "deploying app"
  script: 
    - echo "deploying app"
    #- echo "$SSH_PRIVATE_KEY" | tr -d '\r' > key.pem
    #- chmod 400 key.pem
    #- ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY root@$PROD_SERVER_IP "docker pull registry.gitlab.com/alfredomartinezzz/budgefy"
    #- ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY root@$PROD_SERVER_IP "docker stop budgefycontainer || true && docker rm budgefycontainer || true"
    #- ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY root@$PROD_SERVER_IP "docker run -p 3001:80 -d --name budgefycontainer registry.gitlab.com/alfredomartinezzz/budgefy" 
